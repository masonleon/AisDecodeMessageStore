---------------------------------aisMessageListener---------------------------------
1. Build locally:
    mvn package to produce jar
    move jar from target to dockerfiles directory
    docker build --tag=[tag] .
    docker tag image [username/repo]:[tag]
    docker login
    docker push [username/repo]:[tag]

2. Deploy to server:
    sudo docker pull [username/repo]:[tag]
    sudo docker create --net=host [tag]
    database credentials file must be accessible on server
    sudo docker cp database_credentials.txt [id-output-by-create]:/usr/local/bin/
    sudo docker start -a [id-output-by-create]

--------------------------------------jsonAPI---------------------------------------
1. Build locally:
    mvn package to produce war
    move jar from target to dockerfiles directory
    docker build --tag=[tag] .
    docker tag image [username/repo]:[tag]
    docker login
    docker push [username/repo]:[tag]

2. Deploy to server:
    sudo docker pull [username/repo]:[tag]
    sudo docker create -p 80:8080 [tag]
    database credentials file must be accessible on server
    sudo docker cp database_credentials.txt [id-output-by-create]:$CATALINA_HOME/webapps/credentials/database_credentials
    sudo docker start -a [id-output-by-create]

OLD
Manual steps for building and deploying project docker containers:

1) Build appName.war file with Maven:
	-mvn package

2) Move appName.war from Target directory to dockerfiles directory. Dockerfile FROM instruction should reference appName.war.

3) While in dockerfiles, build docker image:
	-docker build -t imageName .

4) Confirm built docker image:
	-docker image ls

5) Test docker container locally:
	-docker run -p 80:8080 imageName &
	-go to localhost:80 on browser and confirm connection
	-docker stop imageName

6) Move container to EC2:
	Image can be transferred by scp or via a docker hub repository.  Example repo approach:
		-docker login
		-docker tag [image_id] brouse12/ais-decode-message:basic-struts2
		-docker push brouse12/ais-decode-message:basic-struts2
		-ssh to AWS EC2 instance
		-sudo docker run -p 80:8080 brouse12/ais-decode-message:basic-struts2 &
		-The above step might first require a sudo docker pull command

7) Access via a web browser:
	-matthias denu.me/appName

8) Stopping container
	-Confirm running container: sudo docker container ls
	-Stop container: sudo docker stop imageName or sudo docker kill [container id]
	Confirm that port 80 is no longer occupied: netstat -ltnp